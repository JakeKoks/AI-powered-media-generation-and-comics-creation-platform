services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: ai-comics-db-prod
    environment:
      POSTGRES_DB: aicomics
      POSTGRES_USER: aicomics_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    secrets:
      - db_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./config/pg_hba_prod.conf:/var/lib/postgresql/data/pg_hba.conf:ro
      - ./database/schema-enhanced.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/seeds/01-roles-and-admin.sql:/docker-entrypoint-initdb.d/02-seeds.sql:ro
    networks:
      - backend_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aicomics_user -d aicomics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: ai-comics-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
      - ./config/redis_prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - Production Configuration
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: ai-comics-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL_FILE: /run/secrets/db_url
      REDIS_URL: redis://redis:6379
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_REFRESH_SECRET_FILE: /run/secrets/jwt_refresh_secret
      SESSION_SECRET_FILE: /run/secrets/session_secret
      CORS_ORIGIN: https://your-domain.com
      ENABLE_METRICS: true
      LOG_LEVEL: info
    secrets:
      - db_url
      - jwt_secret
      - jwt_refresh_secret
      - session_secret
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

# Production Secrets Management
secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_url:
    file: ./secrets/db_url.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
  session_secret:
    file: ./secrets/session_secret.txt

# Production Networks
networks:
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Production Volumes
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
