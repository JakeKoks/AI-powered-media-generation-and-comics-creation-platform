# Production Docker Compose for jakekoks.fun deployment
version: '3.8'

services:
  # Reverse Proxy & SSL
  traefik:
    image: traefik:v3.0
    container_name: ai-comics-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik:/etc/traefik
      - ./infrastructure/ssl:/ssl
    networks:
      - ai-comics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.jakekoks.fun`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ai-comics-frontend
    restart: unless-stopped
    networks:
      - ai-comics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`www.jakekoks.fun`) || Host(`jakekoks.fun`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: ai-comics-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://comics_user:${DB_PASSWORD}@postgres:5432/ai_comics_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MINIO_ENDPOINT=minio:9000
    networks:
      - ai-comics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.jakekoks.fun`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    depends_on:
      - postgres
      - redis

  # Grafana (Public Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-comics-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_DOMAIN=monitoring.jakekoks.fun
      - GF_SERVER_ROOT_URL=https://monitoring.jakekoks.fun
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana:/etc/grafana/provisioning
    networks:
      - ai-comics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.jakekoks.fun`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Prometheus (Internal Only)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-comics-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./infrastructure/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - ai-comics-network
    # No Traefik labels = Internal access only

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-comics-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_comics_db
      - POSTGRES_USER=comics_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - ai-comics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comics_user -d ai_comics_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-comics-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ai-comics-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ai-comics-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    networks:
      - ai-comics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.jakekoks.fun`)"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-admin.jakekoks.fun`)"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

networks:
  ai-comics-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  grafana_data:
  prometheus_data:
